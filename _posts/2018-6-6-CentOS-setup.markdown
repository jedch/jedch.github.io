---
layout: post
title: CentOS7安装与配置之一
category: python
---
近日在Ubuntu下编译一个程序，被库的依赖问题弄得焦头烂额。转头找centos解决问题吧。虽然我已经很习惯很喜欢u，但是别人的程序是在c下开发的。希望转用centos能让许多依赖问题迎刃而解吧。

1. 在MacOS下准备CentOS7安装U盘。下载centos镜像，命名为c7.iso。插入u盘，用系统磁盘工具，抹掉，选Mac日志。命令显示u盘号，diskutil list，一般为/dev/disk2。卸载u盘，diskutil unmountDisk /dev/disk2。用dd命令复制，sudo dd if=c7.iso of=/dev/rdisk2 bs=10m。这条命令是对的，而且复制很快。最后出现records in，records out，就完成了。
2. 安装CentOS。启动需要安装的电脑，修改bios设置，让usb hdd在硬盘之前启动。插入上面制作号的U盘，F10保存配置，重启。进入界面，选择install。后面的配置简单，需要注意的是有一步在左侧选择gnome，在右侧勾选对应的模块。分区先用自动，复选回收，点完成，全部删除，回收空间。再手动，选标准。装好重启，注意选上含pinyin字样的中文。
3. 配置系统。CentOs的有些版本不自动连接有线，很大的坑，可以更改设置。用轮换系统语言中英文的方法，设置文件夹名为英文，如果有什么问题，查看/etc/xdg文件夹。到清华mirror按照提示添加centos，epel源。之后运行sudo yum makecache刷新源时，运气不好可能会遇到yum.pid锁定的问题，可以一个命令解决：sudo rm -f /var/run/yum.pid。yum安装dash to dock插件，可能需要重启，通过“应用程序”-“优化”-“扩展”-Dash to dock打开启用。用yumex搜索安装no topleft hot corner插件，重启，像上面一样启用。安装cmake3，及gui。与win系统时间冲突问题，sudo gedit /etc/adjtime，把第三行UTC改为LOCAL，保存重启，修改系统时间为正确的当地时间。开发的话，系统自带g++版本太低，升级吧，下载gcc-7.4.0.tar.bz2，解压tar jxvf gcc-7.4.0.tar.bz2，安装yum install gmp-devel mpfr-devel libmpc-devel，建立编译目录mkdir gcc-7.4.0-build，进入cd gcc-7.4.0-build，配置../gcc-7.4.0/configure --enable-languages=c,c++,fortran --disable-multilib，编译make，安装sudo make install，配置在/etc/profile中加入两行export PATH=/usr/local/bin:$PATH和export LD_LIBRARY_PATH=/usr/local/lib64:$LD_LIBRARY_PATH，可能需要重启。
4. 文件系统支持。确保已经安装过EPEL库，再在终端安装Nux Dextop库rpm -Uvh http://li.nux.ro/download/nux/dextop/el7/x86_64/nux-dextop-release-0-5.el7.nux.noarch.rpm，更新源。用yum安装ntfs-3g，fuse-exfat，exfat-utils。重启系统。
5. ROOT6在CentOS下可以直接从yum安装二进制。不想折腾的本条后面都不用看了。想折腾的继续，想编译geant4的最好也继续。命令行一键搞定依赖库，sudo yum install git cmake gcc-c++ gcc binutils libX11-devel libXpm-devel libXft-devel libXext-devel gcc-gfortran openssl-devel pcre-devel mesa-libGL-devel mesa-libGLU-devel glew-devel ftgl-devel mysql-devel fftw-devel cfitsio-devel graphviz-devel avahi-compat-libdns_sd-devel libldap-dev python-devel libxml2-devel gsl-static xerces-c-devel libXmu-devel hdf5-devel。清理软件包的过程有点长，耐心等待。最后下载root6的源代码编译安装。为什么要折腾呢？
6. Geant4从源代码编译安装。第一步，下载源码，数据文件，此处版本为10.5。解压所有gz文件for f in *.tar.gz; do tar xvf $f; done。假设安装路径为/home/user/geant4105，同时建立编译文件夹/home/user/g4build，源文件夹/home/user/g4source，其中有解压的源代码。最后确认一次啊，geant4105文件夹包含share/Geant4-10.5.0/data，其中有下载解压的对应数据文件，g4build文件夹为空，g4source文件夹包含cmake，config，environments，examples，ReleaseNotes，source六个文件夹和CmakeLists.txt，LICENSE两个文件。第二步，打开cmake3-gui，源文件选g4source，build文件选g4build。点击Configure两次，修改CMAKE_INSTALL_PREFIX，对应路径为geant4105。在点击Configure，记住，以后每次改动都要点击Configure。打开下列开关：geant4_use_gdml，hdf5，raytracer_x11。确保Configure和Generate都通过显示done。第三步，在终端进入g4build文件夹，make编译完成，make install安装完成。
7. Garfieldpp安装。 按照官方网站安装步骤，分别输入下面四条命令：export GARFIELD_HOME=/home/mydir/garfield，git clone https://gitlab.cern.ch/garfield/garfieldpp.git $GARFIELD_HOME，cd $GARFIELD_HOME，make。保持网络畅通，可以安装成功。以后保持代码更新用git pull origin master，再make（待测试）。进入到示例目录，如cd Example/Gem，运行make即可得到一个gem可执行文件。上述过程在CentOS和MaxOS下都测试了。要说明的是，在macos下运行实例不成功，需要解决链接gfortran库的问题。
8. 上面是原始文件，下面为MIDAS相关，待整理。改hosts：用nslookup github.com检测其ip，再sudo gedit /etc/hosts，在末尾添加行(ip) github.com，再按前述方法依次添加global-ssl.fastly.net，bitbucket.org等。安装sudo yum install nscd，运行刷新缓存service nscd restart，可以改善git clone的下载速度慢问题。编译roody可能会遇到需要添加include TVirtualX.h的问题，加在对应的头文件中即可。cat编辑文件后按ctrl+D存盘退出。运行mhttpd时，可能无法显示三个示例实验，是不是要改服务器配置文件？sudo gedit /etc/httpd/conf.d/ssl-mhostpc.conf，编辑保存，重启服务器。systemctl enable httpd, systemctl restart httpd, systemctl status httpd。
9. 本文是系列之一。另有之二，侧重于命令行实际操作。希望有之三吧，通过python制作安装脚本。